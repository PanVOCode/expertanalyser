#!/usr/bin/env python3
"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backup'–∞–º–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import os
import sys
import json
import shutil
import pandas as pd
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
sys.path.append(os.path.dirname(__file__))

class AnalysisController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.results_dir = '../results'
        self.checkpoint_file = f'{self.results_dir}/analysis_checkpoint.json'
        self.results_file = f'{self.results_dir}/analysis_results.csv'
        self.backup_dir = f'{self.results_dir}/backups'
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.results_dir, exist_ok=True)
        os.makedirs(self.backup_dir, exist_ok=True)
    
    def check_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞"""
        print("üìä –°–¢–ê–¢–£–° –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoint
        if os.path.exists(self.checkpoint_file):
            try:
                with open(self.checkpoint_file, 'r', encoding='utf-8') as f:
                    checkpoint = json.load(f)
                
                current_index = checkpoint.get('current_index', 0)
                results_count = len(checkpoint.get('results', []))
                total_channels = checkpoint.get('total_channels', 0)
                start_time = datetime.fromisoformat(checkpoint.get('start_time', datetime.now().isoformat()))
                last_save = datetime.fromisoformat(checkpoint.get('last_save', datetime.now().isoformat()))
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {results_count}/{total_channels} –∫–∞–Ω–∞–ª–æ–≤ ({results_count/total_channels*100:.1f}%)")
                print(f"üîÑ –°–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª: {current_index + 1}")
                print(f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {last_save.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                elapsed = datetime.now() - start_time
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed}")
                
                if results_count > 0:
                    avg_time = elapsed / results_count
                    remaining_channels = total_channels - results_count
                    estimated_remaining = avg_time * remaining_channels
                    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–Ω–∞–ª: {avg_time}")
                    print(f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {estimated_remaining}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è checkpoint: {e}")
                return False
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False
    
    def create_backup(self, backup_name=None):
        """–°–æ–∑–¥–∞–µ—Ç backup —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not backup_name:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_name = f"backup_{timestamp}"
        
        backup_path = f"{self.backup_dir}/{backup_name}"
        os.makedirs(backup_path, exist_ok=True)
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup: {backup_name}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if os.path.exists(self.results_file):
            shutil.copy2(self.results_file, f"{backup_path}/analysis_results.csv")
            print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ö–æ–ø–∏—Ä—É–µ–º checkpoint
        if os.path.exists(self.checkpoint_file):
            shutil.copy2(self.checkpoint_file, f"{backup_path}/analysis_checkpoint.json")
            print(f"  ‚úÖ Checkpoint —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É all_folders –µ—Å–ª–∏ –µ—Å—Ç—å
        all_folders_path = f"{self.results_dir}/all_folders"
        if os.path.exists(all_folders_path):
            shutil.copytree(all_folders_path, f"{backup_path}/all_folders", dirs_exist_ok=True)
            print(f"  ‚úÖ –ü–∞–ø–∫–∞ all_folders —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞")
        
        print(f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {backup_path}")
        return backup_path
    
    def restore_backup(self, backup_name):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç backup"""
        backup_path = f"{self.backup_dir}/{backup_name}"
        
        if not os.path.exists(backup_path):
            print(f"‚ùå Backup {backup_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ backup: {backup_name}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        backup_results = f"{backup_path}/analysis_results.csv"
        if os.path.exists(backup_results):
            shutil.copy2(backup_results, self.results_file)
            print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º checkpoint
        backup_checkpoint = f"{backup_path}/analysis_checkpoint.json"
        if os.path.exists(backup_checkpoint):
            shutil.copy2(backup_checkpoint, self.checkpoint_file)
            print(f"  ‚úÖ Checkpoint –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É all_folders
        backup_all_folders = f"{backup_path}/all_folders"
        if os.path.exists(backup_all_folders):
            if os.path.exists(f"{self.results_dir}/all_folders"):
                shutil.rmtree(f"{self.results_dir}/all_folders")
            shutil.copytree(backup_all_folders, f"{self.results_dir}/all_folders")
            print(f"  ‚úÖ –ü–∞–ø–∫–∞ all_folders –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        print(f"‚úÖ Backup –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def list_backups(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤"""
        print("üìã –î–û–°–¢–£–ü–ù–´–ï BACKUP'–´")
        print("=" * 50)
        
        if not os.path.exists(self.backup_dir):
            print("‚ùå –ü–∞–ø–∫–∞ backup'–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        backups = []
        for item in os.listdir(self.backup_dir):
            backup_path = f"{self.backup_dir}/{item}"
            if os.path.isdir(backup_path):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backup
                stat = os.stat(backup_path)
                created_time = datetime.fromtimestamp(stat.st_mtime)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                has_results = os.path.exists(f"{backup_path}/analysis_results.csv")
                has_checkpoint = os.path.exists(f"{backup_path}/analysis_checkpoint.json")
                has_folders = os.path.exists(f"{backup_path}/all_folders")
                
                backups.append({
                    'name': item,
                    'created': created_time,
                    'has_results': has_results,
                    'has_checkpoint': has_checkpoint,
                    'has_folders': has_folders
                })
        
        if not backups:
            print("‚ùå Backup'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        backups.sort(key=lambda x: x['created'], reverse=True)
        
        for i, backup in enumerate(backups, 1):
            print(f"{i}. {backup['name']}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {backup['created'].strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ", end="")
            if backup['has_results']:
                print("üìÑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ", end="")
            if backup['has_checkpoint']:
                print("üíæ checkpoint ", end="")
            if backup['has_folders']:
                print("üìÅ –ø–∞–ø–∫–∏ ", end="")
            print()
            print()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if os.path.exists(self.results_file):
            try:
                df = pd.read_csv(self.results_file, sep=';', encoding='utf-8')
                total_channels = len(df)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
                expert_stats = df['—ç–∫—Å–ø–µ—Ä—Ç'].value_counts()
                
                print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}")
                print(f"üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç—ã: {expert_stats.get('true', 0)} ({expert_stats.get('true', 0)/total_channels*100:.1f}%)")
                print(f"‚ùå –ù–µ —ç–∫—Å–ø–µ—Ä—Ç—ã: {expert_stats.get('false', 0)} ({expert_stats.get('false', 0)/total_channels*100:.1f}%)")
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: {expert_stats.get('unknown', 0)} ({expert_stats.get('unknown', 0)/total_channels*100:.1f}%)")
                
                # –¢–æ–ø –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                print("\nüèÜ –¢–û–ü –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ô:")
                all_competencies = []
                for comp_str in df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏'].dropna():
                    if comp_str and comp_str != '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
                        competencies = [c.strip() for c in comp_str.split(',')]
                        all_competencies.extend(competencies)
                
                if all_competencies:
                    from collections import Counter
                    comp_counter = Counter(all_competencies)
                    top_comp = comp_counter.most_common(10)
                    
                    for i, (comp, count) in enumerate(top_comp, 1):
                        print(f"  {i}. {comp}: {count}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        else:
            print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def cleanup_old_backups(self, days=7):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ backup'—ã"""
        cutoff_date = datetime.now() - timedelta(days=days)
        deleted_count = 0
        
        print(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ backup'–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
        
        if not os.path.exists(self.backup_dir):
            print("‚ùå –ü–∞–ø–∫–∞ backup'–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        for item in os.listdir(self.backup_dir):
            backup_path = f"{self.backup_dir}/{item}"
            if os.path.isdir(backup_path):
                stat = os.stat(backup_path)
                created_time = datetime.fromtimestamp(stat.st_mtime)
                
                if created_time < cutoff_date:
                    try:
                        shutil.rmtree(backup_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {item}")
                        deleted_count += 1
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ backup'–æ–≤: {deleted_count}")
    
    def reset_analysis(self, confirm=False):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ (—É–¥–∞–ª—è–µ—Ç checkpoint)"""
        if not confirm:
            print("‚ö†Ô∏è –î–ª—è —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --confirm")
            return False
        
        print("üîÑ –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞")
        
        if os.path.exists(self.checkpoint_file):
            os.remove(self.checkpoint_file)
            print("‚úÖ Checkpoint —É–¥–∞–ª–µ–Ω")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤')
    parser.add_argument('action', choices=['status', 'backup', 'restore', 'list-backups', 
                                          'stats', 'cleanup', 'reset'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--name', help='–ò–º—è backup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è')
    parser.add_argument('--days', type=int, default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è cleanup')
    parser.add_argument('--confirm', action='store_true', help='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è reset')
    
    args = parser.parse_args()
    
    controller = AnalysisController()
    
    if args.action == 'status':
        controller.check_status()
    
    elif args.action == 'backup':
        controller.create_backup(args.name)
    
    elif args.action == 'restore':
        if not args.name:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: --name")
            return
        controller.restore_backup(args.name)
    
    elif args.action == 'list-backups':
        controller.list_backups()
    
    elif args.action == 'stats':
        controller.show_statistics()
    
    elif args.action == 'cleanup':
        controller.cleanup_old_backups(args.days)
    
    elif args.action == 'reset':
        controller.reset_analysis(args.confirm)

if __name__ == "__main__":
    main() 