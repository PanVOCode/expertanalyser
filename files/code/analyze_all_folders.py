#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import pandas as pd
import re
import json
import csv
from pathlib import Path
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
from ai import ask_ai

def save_result_to_csv(result, filename='../results/analysis_results_all_folders.csv'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ CSV —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        file_exists = False
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                file_exists = True
        except FileNotFoundError:
            pass
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        with open(filename, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['channelname', 'linktochannel', '—ç–∫—Å–ø–µ—Ä—Ç', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
            if not file_exists:
                writer.writeheader()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            writer.writerow(result)
            
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")

def extract_top_posts_from_excel(folder_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª posts.xlsx –≤ –ø–∞–ø–∫–µ
        excel_file = folder_path / 'posts.xlsx'
        if not excel_file.exists():
            print(f"‚ùå –§–∞–π–ª posts.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {folder_path}")
            return ""
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç'])].copy()
        
        if len(df) == 0:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {excel_file}")
            return ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        top_5_posts = df.nlargest(5, '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è AI
        top_posts_text = ""
        for i, (_, row) in enumerate(top_5_posts.iterrows(), 1):
            post_text = row.get('–ü–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç', '')
            if post_text and post_text.strip():
                top_posts_text += f"—Ç–µ–∫—Å—Ç {i}:\n{post_text.strip()}\n\n"
        
        return top_posts_text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ {folder_path}: {e}")
        return ""

def analyze_all_folders():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ all_folders —á–µ—Ä–µ–∑ AI"""
    
    all_folders_path = Path('../results/all_folders')
    if not all_folders_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ all_folders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
    folders = [f for f in all_folders_path.iterdir() if f.is_dir()]
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    results = []
    
    for index, folder in enumerate(folders, 1):
        channel_name = folder.name
        print(f"\n{'='*60}")
        print(f"–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê {index}/{len(folders)}: {channel_name}")
        print(f"{'='*60}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
            print(f"üìä –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {folder}/posts.xlsx...")
            top_posts_text = extract_top_posts_from_excel(folder)
            
            if top_posts_text:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_posts_text.split('—Ç–µ–∫—Å—Ç')) - 1} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                print("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ AI...")
                ai_analysis = ask_ai(top_posts_text)
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
                expert = "unknown"
                competencies = []
                
                try:
                    # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ AI
                    json_match = re.search(r'\{.*\}', ai_analysis, re.DOTALL)
                    if json_match:
                        json_str = json_match.group(0)
                        ai_data = json.loads(json_str)
                        
                        expert = str(ai_data.get('—ç–∫—Å–ø–µ—Ä—Ç', 'unknown')).lower()
                        competencies = ai_data.get('–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', [])
                        
                        if isinstance(competencies, list):
                            competencies = ', '.join(competencies)
                        else:
                            competencies = str(competencies)
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ AI: {ai_analysis}")
                        competencies = ai_analysis
                        
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"–û—Ç–≤–µ—Ç AI: {ai_analysis}")
                    competencies = ai_analysis
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'channelname': channel_name,
                    'linktochannel': f"https://t.me/{channel_name}",
                    '—ç–∫—Å–ø–µ—Ä—Ç': expert,
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': competencies
                }
                
                # –°–†–ê–ó–£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV
                save_result_to_csv(result)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                results.append(result)
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {channel_name}")
                print(f"–≠–∫—Å–ø–µ—Ä—Ç: {expert}")
                print(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {competencies}")
                
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {channel_name}")
                result = {
                    'channelname': channel_name,
                    'linktochannel': f"https://t.me/{channel_name}",
                    '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
                }
                save_result_to_csv(result)
                results.append(result)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {channel_name}: {e}")
            result = {
                'channelname': channel_name,
                'linktochannel': f"https://t.me/{channel_name}",
                '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
            save_result_to_csv(result)
            results.append(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if index < len(folders):
            print("–ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã...")
            import time
            time.sleep(1.5)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: analysis_results_all_folders.csv")
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
    experts = [r['—ç–∫—Å–ø–µ—Ä—Ç'] for r in results if r['—ç–∫—Å–ø–µ—Ä—Ç'] != 'unknown']
    true_experts = [e for e in experts if e == 'true']
    false_experts = [e for e in experts if e == 'false']
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {len(true_experts)}")
    print(f"–ù–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {len(false_experts)}")
    print(f"{'='*60}")

if __name__ == "__main__":
    analyze_all_folders() 