#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É checkpoint'–æ–≤, backup'–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import time
import json
import tempfile
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
sys.path.append(os.path.dirname(__file__))

def test_checkpoint_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É checkpoint'–æ–≤"""
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ CHECKPOINT'–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = tempfile.mkdtemp(prefix="test_analysis_")
    checkpoint_file = os.path.join(test_dir, "test_checkpoint.json")
    results_file = os.path.join(test_dir, "test_results.csv")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        test_data = {
            'current_index': 5,
            'results': [
                {'channelname': 'test1', 'linktochannel': 'https://t.me/test1', '—ç–∫—Å–ø–µ—Ä—Ç': 'true', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–¢–µ—Å—Ç1'},
                {'channelname': 'test2', 'linktochannel': 'https://t.me/test2', '—ç–∫—Å–ø–µ—Ä—Ç': 'false', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–¢–µ—Å—Ç2'},
            ],
            'total_channels': 10,
            'start_time': datetime.now().isoformat(),
            'last_save': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint...")
        with open(checkpoint_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ (—É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
        print("‚ö†Ô∏è –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ checkpoint...")
        with open(checkpoint_file, 'r', encoding='utf-8') as f:
            loaded_data = json.load(f)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(loaded_data['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–∞–Ω–∞–ª–∞: {loaded_data['current_index'] + 1}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        new_result = {'channelname': 'test3', 'linktochannel': 'https://t.me/test3', '—ç–∫—Å–ø–µ—Ä—Ç': 'true', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–¢–µ—Å—Ç3'}
        loaded_data['results'].append(new_result)
        loaded_data['current_index'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π checkpoint
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ checkpoint...")
        with open(checkpoint_file, 'w', encoding='utf-8') as f:
            json.dump(loaded_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(loaded_data['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("‚úÖ –¢–µ—Å—Ç checkpoint —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω!")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

def test_backup_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É backup'–æ–≤"""
    print("\nüß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ BACKUP'–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = tempfile.mkdtemp(prefix="test_backup_")
    backup_dir = os.path.join(test_dir, "backups")
    os.makedirs(backup_dir, exist_ok=True)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_results = "channelname;linktochannel;—ç–∫—Å–ø–µ—Ä—Ç;–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\ntest1;https://t.me/test1;true;–¢–µ—Å—Ç1\ntest2;https://t.me/test2;false;–¢–µ—Å—Ç2"
        test_checkpoint = {
            'current_index': 2,
            'results': [{'channelname': 'test1'}, {'channelname': 'test2'}],
            'total_channels': 5
        }
        
        # –°–æ–∑–¥–∞–µ–º backup
        backup_name = "test_backup_001"
        backup_path = os.path.join(backup_dir, backup_name)
        os.makedirs(backup_path, exist_ok=True)
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup: {backup_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ backup
        with open(os.path.join(backup_path, "analysis_results.csv"), 'w', encoding='utf-8') as f:
            f.write(test_results)
        
        with open(os.path.join(backup_path, "analysis_checkpoint.json"), 'w', encoding='utf-8') as f:
            json.dump(test_checkpoint, f, indent=2)
        
        print("‚úÖ Backup —Å–æ–∑–¥–∞–Ω")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ backup
        backup_files = os.listdir(backup_path)
        print(f"üìÅ –§–∞–π–ª—ã –≤ backup: {backup_files}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        restored_results = ""
        with open(os.path.join(backup_path, "analysis_results.csv"), 'r', encoding='utf-8') as f:
            restored_results = f.read()
        
        restored_checkpoint = {}
        with open(os.path.join(backup_path, "analysis_checkpoint.json"), 'r', encoding='utf-8') as f:
            restored_checkpoint = json.load(f)
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(restored_checkpoint['results'])}")
        print("‚úÖ –¢–µ—Å—Ç backup —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω!")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

def test_atomic_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏"""
    print("\nüß™ –¢–ï–°–¢ –ê–¢–û–ú–ê–†–ù–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = tempfile.mkdtemp(prefix="test_atomic_")
    
    try:
        target_file = os.path.join(test_dir, "target.txt")
        temp_file = os.path.join(test_dir, "temp.txt")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å
        print("üíæ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞...")
        
        # –®–∞–≥ 1: –ó–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n")
            f.write("–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n")
            f.write("–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞\n")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        with open(temp_file, 'r', encoding='utf-8') as f:
            content = f.read()
            if len(content) > 0:
                print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        # –®–∞–≥ 3: –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        if os.path.exists(target_file):
            os.remove(target_file)
        os.rename(temp_file, target_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(target_file, 'r', encoding='utf-8') as f:
            final_content = f.read()
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –∞—Ç–æ–º–∞—Ä–Ω–æ: {len(final_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("‚úÖ –¢–µ—Å—Ç –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω!")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

def test_graceful_shutdown():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç graceful shutdown (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    print("\nüß™ –¢–ï–°–¢ GRACEFUL SHUTDOWN")
    print("=" * 50)
    
    print("‚ö†Ô∏è –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    time.sleep(1)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    print("üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    print("‚úÖ –¢–µ—Å—Ç graceful shutdown –ø—Ä–æ–π–¥–µ–Ω!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_checkpoint_system()
        test_backup_system()
        test_atomic_operations()
        test_graceful_shutdown()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 