import os
import sys
import pandas as pd
import time
from telethon.sync import TelegramClient
from telethon.tl.types import ReactionEmoji, ReactionPaid, ReactionCustomEmoji, MessageMediaPhoto
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Alignment
from datetime import datetime
import numpy as np
import csv
import json
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import (
    only_text, stat_tables, api_id, api_hash, start_date, end_date, SORT_BY_VIRALITY,
    CREATE_MULTIPLE_SORTED_FILES, SHOW_VIRALITY_STATISTICS, CREATE_VIRALITY_SUMMARY_REPORT
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from analyse import analyse
from ai import ask_ai

if __name__ == "__main__":
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ tgstat.csv
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        try:
            channels_df = pd.read_csv('files/tgstat.csv', sep=';', encoding='utf-8')
        except:
            try:
                channels_df = pd.read_csv('files/tgstat.csv', sep=',', encoding='utf-8')
            except:
                channels_df = pd.read_csv('files/tgstat.csv', sep='\t', encoding='utf-8')
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(channels_df)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    except FileNotFoundError:
        print("–§–∞–π–ª files/tgstat.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ tgstat.csv: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ; , tab")
        exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü (–∏–Ω–¥–µ–∫—Å 2), —Ç–∞–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∏ –æ–±—ã—á–Ω–æ —Ç–∞–º
    if len(channels_df.columns) >= 3:
        link_column = channels_df.columns[2]
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü: {link_column}")
    else:
        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–µ–Ω—å—à–µ 3, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        link_column = None
        for col in channels_df.columns:
            if 'link' in col.lower() or 'channel' in col.lower() or 'url' in col.lower() or 't.me' in col.lower():
                link_column = col
                break
        
        if not link_column:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ tgstat.csv")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(channels_df.columns)}")
            exit(1)
    
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü: {link_column}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    for index, row in channels_df.iterrows():
        channel_url = row[link_column]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
        if pd.isna(channel_url) or not str(channel_url).strip():
            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª {index + 1}: –ø—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞")
            continue
        
        print(f"\n{'='*60}")
        print(f"–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê {index + 1}/{len(channels_df)}: {channel_url}")
        print(f"{'='*60}")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤
            top_posts_text = analyse(channel_url)
            
            if top_posts_text:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_posts_text.split('—Ç–µ–∫—Å—Ç')) - 1} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ AI...")
                ai_analysis = ask_ai(top_posts_text)
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
                expert = "unknown"
                competencies = []
                
                try:
                    # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ AI
                    json_match = re.search(r'\{.*\}', ai_analysis, re.DOTALL)
                    if json_match:
                        json_str = json_match.group(0)
                        ai_data = json.loads(json_str)
                        
                        expert = str(ai_data.get('—ç–∫—Å–ø–µ—Ä—Ç', 'unknown')).lower()
                        competencies = ai_data.get('–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', [])
                        
                        if isinstance(competencies, list):
                            competencies = ', '.join(competencies)
                        else:
                            competencies = str(competencies)
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ AI: {ai_analysis}")
                        competencies = ai_analysis
                        
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"–û—Ç–≤–µ—Ç AI: {ai_analysis}")
                    competencies = ai_analysis
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
                channel_name = ""
                try:
                    match = re.search(r"(?:https?://)?t\.me/(.+?)(?:/|$)", channel_url)
                    if match:
                        channel_name = match.group(1).replace('@', '')
                except:
                    channel_name = "unknown"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results.append({
                    'channelname': channel_name,
                    'linktochannel': channel_url,
                    '—ç–∫—Å–ø–µ—Ä—Ç': expert,
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': competencies
                })
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {channel_url}")
                print(f"–ö–∞–Ω–∞–ª: {channel_name}")
                print(f"–≠–∫—Å–ø–µ—Ä—Ç: {expert}")
                print(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {competencies}")
                
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {channel_url}")
                results.append({
                    'channelname': "unknown",
                    'linktochannel': channel_url,
                    '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {channel_url}: {e}")
            results.append({
                'channelname': "unknown",
                'linktochannel': channel_url,
                '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        if index < len(channels_df) - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            print("–ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(1.5)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ 1000 –∫–∞–Ω–∞–ª–∞–º–∏
        if index >= 999:  # 0-based indexing, –ø–æ—ç—Ç–æ–º—É 999 = 1000-–π –∫–∞–Ω–∞–ª
            print("üîç –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 –∫–∞–Ω–∞–ª–æ–≤. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª
    output_filename = '../results/analysis_results.csv'
    try:
        with open(output_filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['channelname', 'linktochannel', '—ç–∫—Å–ø–µ—Ä—Ç', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
            
            writer.writeheader()
            for result in results:
                writer.writerow(result)
        
        print(f"\n{'='*60}")
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_filename}")
        print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}")
        print(f"{'='*60}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        for result in results:
            print(f"{result['channelname']};{result['linktochannel']};{result['—ç–∫—Å–ø–µ—Ä—Ç']};{result['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏']}")
