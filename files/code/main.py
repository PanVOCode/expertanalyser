import os
import sys
import pandas as pd
import time
import tempfile
import shutil
from telethon.sync import TelegramClient
from telethon.tl.types import ReactionEmoji, ReactionPaid, ReactionCustomEmoji, MessageMediaPhoto
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Alignment
from datetime import datetime
import numpy as np
import csv
import json
import re
import signal
import atexit

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import (
    only_text, stat_tables, api_id, api_hash, start_date, end_date, SORT_BY_VIRALITY,
    CREATE_MULTIPLE_SORTED_FILES, SHOW_VIRALITY_STATISTICS, CREATE_VIRALITY_SUMMARY_REPORT
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from analyse import analyse
from ai import ask_ai

class AnalysisManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, checkpoint_file='../results/analysis_checkpoint.json', 
                 results_file='../results/analysis_results.csv',
                 temp_results_file='../results/analysis_results_temp.csv'):
        self.checkpoint_file = checkpoint_file
        self.results_file = results_file
        self.temp_results_file = temp_results_file
        self.results = []
        self.current_index = 0
        self.total_channels = 0
        self.start_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(self.results_file), exist_ok=True)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        atexit.register(self._cleanup)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        self._load_checkpoint()
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
        self._save_checkpoint()
        self._save_results()
        print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∂–µ.")
        sys.exit(0)
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self._save_checkpoint()
            self._save_results()
        except:
            pass
    
    def _load_checkpoint(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç checkpoint —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            if os.path.exists(self.checkpoint_file):
                with open(self.checkpoint_file, 'r', encoding='utf-8') as f:
                    checkpoint = json.load(f)
                
                self.current_index = checkpoint.get('current_index', 0)
                self.results = checkpoint.get('results', [])
                self.total_channels = checkpoint.get('total_channels', 0)
                self.start_time = datetime.fromisoformat(checkpoint.get('start_time', datetime.now().isoformat()))
                
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω checkpoint: {len(self.results)} –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–∞–Ω–∞–ª–∞ {self.current_index + 1}")
                return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ checkpoint: {e}")
        
        return False
    
    def _save_checkpoint(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ checkpoint"""
        try:
            checkpoint = {
                'current_index': self.current_index,
                'results': self.results,
                'total_channels': self.total_channels,
                'start_time': self.start_time.isoformat(),
                'last_save': datetime.now().isoformat()
            }
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_checkpoint = self.checkpoint_file + '.tmp'
            with open(temp_checkpoint, 'w', encoding='utf-8') as f:
                json.dump(checkpoint, f, indent=2, ensure_ascii=False)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            if os.path.exists(self.checkpoint_file):
                os.remove(self.checkpoint_file)
            os.rename(temp_checkpoint, self.checkpoint_file)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: {e}")
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.temp_results_file, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['channelname', 'linktochannel', '—ç–∫—Å–ø–µ—Ä—Ç', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
                
                writer.writeheader()
                for result in self.results:
                    writer.writerow(result)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
            if os.path.exists(self.results_file):
                backup_file = self.results_file + '.backup'
                shutil.copy2(self.results_file, backup_file)
                print(f"üíæ –°–æ–∑–¥–∞–Ω backup: {backup_file}")
            
            shutil.move(self.temp_results_file, self.results_file)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _save_intermediate_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self._save_checkpoint()
        self._save_results()
        print(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(self.results)} –∫–∞–Ω–∞–ª–æ–≤")
    
    def analyze_channel(self, channel_url, channel_index):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            print(f"\n{'='*60}")
            print(f"–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê {channel_index + 1}/{self.total_channels}: {channel_url}")
            print(f"{'='*60}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤
            top_posts_text = analyse(channel_url)
            
            if top_posts_text:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_posts_text.split('—Ç–µ–∫—Å—Ç')) - 1} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ AI...")
                ai_analysis = ask_ai(top_posts_text)
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
                expert = "unknown"
                competencies = []
                
                try:
                    # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ AI
                    json_match = re.search(r'\{.*\}', ai_analysis, re.DOTALL)
                    if json_match:
                        json_str = json_match.group(0)
                        ai_data = json.loads(json_str)
                        
                        expert = str(ai_data.get('—ç–∫—Å–ø–µ—Ä—Ç', 'unknown')).lower()
                        competencies = ai_data.get('–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', [])
                        
                        if isinstance(competencies, list):
                            competencies = ', '.join(competencies)
                        else:
                            competencies = str(competencies)
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ AI: {ai_analysis}")
                        competencies = ai_analysis
                        
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"–û—Ç–≤–µ—Ç AI: {ai_analysis}")
                    competencies = ai_analysis
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
                channel_name = ""
                try:
                    match = re.search(r"(?:https?://)?t\.me/(.+?)(?:/|$)", channel_url)
                    if match:
                        channel_name = match.group(1).replace('@', '')
                except:
                    channel_name = "unknown"
                
                result = {
                    'channelname': channel_name,
                    'linktochannel': channel_url,
                    '—ç–∫—Å–ø–µ—Ä—Ç': expert,
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': competencies
                }
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {channel_url}")
                print(f"–ö–∞–Ω–∞–ª: {channel_name}")
                print(f"–≠–∫—Å–ø–µ—Ä—Ç: {expert}")
                print(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {competencies}")
                
                return result
                
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {channel_url}")
                return {
                    'channelname': "unknown",
                    'linktochannel': channel_url,
                    '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                    '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {channel_url}: {e}")
            return {
                'channelname': "unknown",
                'linktochannel': channel_url,
                '—ç–∫—Å–ø–µ—Ä—Ç': 'unknown',
                '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def run_analysis(self, channels_df, link_column):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.total_channels = len(channels_df)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ {self.total_channels} –∫–∞–Ω–∞–ª–æ–≤")
        print(f"üìä –£–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(self.results)} –∫–∞–Ω–∞–ª–æ–≤")
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–∞–Ω–∞–ª–∞: {self.current_index + 1}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for index in range(self.current_index, len(channels_df)):
            row = channels_df.iloc[index]
            channel_url = row[link_column]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
            if pd.isna(channel_url) or not str(channel_url).strip():
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª {index + 1}: –ø—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞")
                self.current_index = index + 1
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
            result = self.analyze_channel(channel_url, index)
            self.results.append(result)
            self.current_index = index + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
            if len(self.results) % 10 == 0:
                self._save_intermediate_results()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            if index < len(channels_df) - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                print("–ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(1.5)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ 1000 –∫–∞–Ω–∞–ª–∞–º–∏
            if index >= 999:  # 0-based indexing, –ø–æ—ç—Ç–æ–º—É 999 = 1000-–π –∫–∞–Ω–∞–ª
                print("üîç –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 –∫–∞–Ω–∞–ª–æ–≤. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                break
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self._save_intermediate_results()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        elapsed_time = datetime.now() - self.start_time
        print(f"\n{'='*60}")
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.results_file}")
        print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.results)}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–Ω–∞–ª: {elapsed_time / len(self.results) if self.results else 0}")
        print(f"{'='*60}")
        
        # –£–¥–∞–ª—è–µ–º checkpoint –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if os.path.exists(self.checkpoint_file):
            os.remove(self.checkpoint_file)
            print("üóëÔ∏è Checkpoint —É–¥–∞–ª–µ–Ω (–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ tgstat.csv
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        try:
            channels_df = pd.read_csv('files/tgstat.csv', sep=';', encoding='utf-8')
        except:
            try:
                channels_df = pd.read_csv('files/tgstat.csv', sep=',', encoding='utf-8')
            except:
                channels_df = pd.read_csv('files/tgstat.csv', sep='\t', encoding='utf-8')
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(channels_df)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    except FileNotFoundError:
        print("–§–∞–π–ª files/tgstat.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ tgstat.csv: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ; , tab")
        exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    if len(channels_df.columns) >= 3:
        link_column = channels_df.columns[2]
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü: {link_column}")
    else:
        link_column = None
        for col in channels_df.columns:
            if 'link' in col.lower() or 'channel' in col.lower() or 'url' in col.lower() or 't.me' in col.lower():
                link_column = col
                break
        
        if not link_column:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ tgstat.csv")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(channels_df.columns)}")
            exit(1)
    
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü: {link_column}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    manager = AnalysisManager()
    manager.run_analysis(channels_df, link_column)

if __name__ == "__main__":
    main()
