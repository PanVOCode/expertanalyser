#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
from aiconfig import DEEPSEEK_API_KEY, DEEPSEEK_BASE_URL, DEEPSEEK_MODEL

def test_api_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç API —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    print("üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API...")
    print(f"API Key: {DEEPSEEK_API_KEY[:20]}...")
    print(f"Base URL: {DEEPSEEK_BASE_URL}")
    print(f"Model: {DEEPSEEK_MODEL}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": DEEPSEEK_MODEL,
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç"}
        ],
        "max_tokens": 10,
        "temperature": 0.7
    }
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers1 = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "HTTP-Referer": "https://github.com/your-repo",
        "X-Title": "Telegram Channel Analyzer"
    }
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    headers2 = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "HTTP-Referer": "https://github.com/your-repo",
        "X-Title": "Telegram Channel Analyzer",
        "User-Agent": "Telegram-Channel-Analyzer/1.0",
        "Accept": "application/json"
    }
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ë–µ–∑ HTTP-Referer
    headers3 = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "X-Title": "Telegram Channel Analyzer"
    }
    
    # –í–∞—Ä–∏–∞–Ω—Ç 4: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers4 = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }
    
    headers_list = [
        ("–í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏", headers1),
        ("–í–∞—Ä–∏–∞–Ω—Ç 2: –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏", headers2),
        ("–í–∞—Ä–∏–∞–Ω—Ç 3: –ë–µ–∑ HTTP-Referer", headers3),
        ("–í–∞—Ä–∏–∞–Ω—Ç 4: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏", headers4)
    ]
    
    for name, headers in headers_list:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {json.dumps(headers, indent=2)}")
        
        try:
            response = requests.post(
                f"{DEEPSEEK_BASE_URL}/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£–°–ü–ï–•! –û—Ç–≤–µ—Ç: {result}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

if __name__ == "__main__":
    success = test_api_alternative()
    if success:
        print("\nüéâ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
    else:
        print("\nüí• API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º!")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ API –∫–ª—é—á")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è OpenRouter")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á –Ω–∞ openrouter.ai") 