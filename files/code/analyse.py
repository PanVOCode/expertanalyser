import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
from config import (
    only_text, stat_tables, api_id, api_hash, start_date, end_date, SORT_BY_VIRALITY,
    CREATE_MULTIPLE_SORTED_FILES, SHOW_VIRALITY_STATISTICS, CREATE_VIRALITY_SUMMARY_REPORT
)
from telethon.sync import TelegramClient
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime
import numpy as np
import re
from pathlib import Path

POSITIVE_EMOJIS = {'üëç', '‚ù§', 'üî•', 'üòä', 'üòÇ', 'ü•∞', 'üëè', '‚ö°', '‚ù§‚Äçüî•', 'ü´°', 'ü§ó', 'üòç', 'üëå', 'üòÅ', 'üíØ', 'üôè', 'ü§©'}

def calculate_er_percentage(row):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (ER%)"""
    views = row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    if views == 0:
        return 0
    
    total_engagement = row['–†–µ–∞–∫—Ü–∏–∏'] + row['–ö–æ–º–º–µ–Ω—Ç—ã'] + row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']
    return (total_engagement / views) * 100

def calculate_virality(row):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ"""
    forwards = row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']
    comments = row['–ö–æ–º–º–µ–Ω—Ç—ã']
    reactions = row['–†–µ–∞–∫—Ü–∏–∏']
    er_percentage = row['ER%']
    positive_negative_balance = row['–í—Å–µ–≥–æ (+)'] - row['–í—Å–µ–≥–æ (-)']
    views = row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    viral_score = (5 * forwards + 3 * comments + 2 * reactions + 1.5 * er_percentage + 0.5 * positive_negative_balance) / np.log(views + 1)
    
    return viral_score

def calculate_viral_coefficient(row):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ—Å—ã–ª–∫–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã * 1000)"""
    forwards = row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']
    views = row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    
    if views == 0:
        return 0
    
    return (forwards / views) * 1000

def calculate_engagement_virality(row):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
    reactions = row['–†–µ–∞–∫—Ü–∏–∏']
    comments = row['–ö–æ–º–º–µ–Ω—Ç—ã']
    forwards = row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']
    views = row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    
    if views == 0:
        return 0
    
    total_engagement = reactions + comments + forwards
    return (total_engagement / views) * 100

def sort_by_virality(df, sort_type='default'):
    """
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        sort_type: —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('default', 'coefficient', 'engagement', 'forwards', 'reactions')
    """
    if sort_type == 'default':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        return df.sort_values(by='–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', ascending=False).reset_index(drop=True)
    elif sort_type == 'coefficient':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ—Å—ã–ª–∫–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
        return df.sort_values(by='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏', ascending=False).reset_index(drop=True)
    elif sort_type == 'engagement':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        return df.sort_values(by='–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏', ascending=False).reset_index(drop=True)
    elif sort_type == 'forwards':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ—Å—ã–ª–æ–∫
        return df.sort_values(by='–ü–µ—Ä–µ—Å—ã–ª–∫–∏', ascending=False).reset_index(drop=True)
    elif sort_type == 'reactions':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–∫—Ü–∏–π
        return df.sort_values(by='–†–µ–∞–∫—Ü–∏–∏', ascending=False).reset_index(drop=True)
    elif sort_type == 'views':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        return df.sort_values(by='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', ascending=False).reset_index(drop=True)
    elif sort_type == 'date':
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        return df.sort_values(by='–î–∞—Ç–∞', ascending=False).reset_index(drop=True)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        return df.sort_values(by='–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', ascending=False).reset_index(drop=True)

def save_to_excel(df, filename, channel_username, start_date, end_date):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Posts"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for r in dataframe_to_rows(df, index=False, header=True):
        ws.append(r)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    header_alignment = Alignment(horizontal="center", vertical="center")
    
    for cell in ws[1]:
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = header_alignment
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for column in ws.columns:
        max_length = 0
        column_letter = column[0].column_letter
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)
        ws.column_dimensions[column_letter].width = adjusted_width
    
    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    ws.freeze_panes = "A2"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –ø–µ—Ä–∏–æ–¥–µ
    ws.insert_rows(1, 3)
    ws['A1'] = f"–ö–∞–Ω–∞–ª: {channel_username}"
    ws['A2'] = f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
    ws['A3'] = f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(df)}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É results
    results_dir = Path('results')
    results_dir.mkdir(exist_ok=True)
    file_path = results_dir / filename
    wb.save(file_path)
    print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

def create_multiple_sorted_files(df, channel_username, start_date, end_date):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ Excel —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
    df = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç'])].copy()
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
    numeric_columns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–†–µ–∞–∫—Ü–∏–∏', '–í—Å–µ–≥–æ (+)', '–í—Å–µ–≥–æ (-)', '–í—Å–µ–≥–æ', '–ö–æ–º–º–µ–Ω—Ç—ã', '–ü–µ—Ä–µ—Å—ã–ª–∫–∏', 'ER%', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    sort_types = {
        'default': '–ü–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)',
        'coefficient': '–ü–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏',
        'engagement': '–ü–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏',
        'forwards': '–ü–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º',
        'reactions': '–ü–æ —Ä–µ–∞–∫—Ü–∏—è–º',
        'views': '–ü–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º',
        'date': '–ü–æ –¥–∞—Ç–µ'
    }
    
    for sort_type, description in sort_types.items():
        if not stat_tables.get(sort_type, False):
            continue
        sorted_df = sort_by_virality(df.copy(), sort_type)
        filename = f'posts_sorted_by_{sort_type}.xlsx'
        save_to_excel(sorted_df, filename, channel_username, start_date, end_date)
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename} - {description}")

def print_virality_statistics(df):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤
    """
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
    df = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç'])].copy()
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
    numeric_columns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–†–µ–∞–∫—Ü–∏–∏', '–í—Å–µ–≥–æ (+)', '–í—Å–µ–≥–æ (-)', '–í—Å–µ–≥–æ', '–ö–æ–º–º–µ–Ω—Ç—ã', '–ü–µ—Ä–µ—Å—ã–ª–∫–∏', 'ER%', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    print("\n" + "="*60)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–†–ê–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(df)}")
    print(f"–°—Ä–µ–¥–Ω—è—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].mean():.2f}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].max():.2f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].min():.2f}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–°—Ä–µ–¥–Ω–∏–π ER%: {df['ER%'].mean():.2f}%")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {df['–ö–æ–º–º–µ–Ω—Ç—ã'].mean():.1f}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {df['–ö–æ–º–º–µ–Ω—Ç—ã'].sum():,}")
    print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–π (+/-): {df['–í—Å–µ–≥–æ (+)'].mean() - df['–í—Å–µ–≥–æ (-)'].mean():.1f}")
    print(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–π (+/-): {df['–í—Å–µ–≥–æ (+)'].sum() - df['–í—Å–µ–≥–æ (-)'].sum():,}")
    
    # Top-5 sections
    if stat_tables.get('default', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –í–ò–†–ê–õ–¨–ù–û–°–¢–ò:")
        print("-" * 40)
        top_viral = df.nlargest(5, '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å')
        for i, (_, row) in enumerate(top_viral.iterrows(), 1):
            print(f"{i}. –í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {row['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å']:.2f}")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}")
            print(f"   –†–µ–∞–∫—Ü–∏–∏: {row['–†–µ–∞–∫—Ü–∏–∏']}")
            print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {row['–ö–æ–º–º–µ–Ω—Ç—ã']}")
            print(f"   ER%: {row['ER%']:.2f}%")
            print(f"   –ë–∞–ª–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–π (+/-): {row['–í—Å–µ–≥–æ (+)'] - row['–í—Å–µ–≥–æ (-)']}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()
    
    if stat_tables.get('coefficient', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–£ –í–ò–†–ê–õ–¨–ù–û–°–¢–ò:")
        print("-" * 40)
        top_coefficient = df.nlargest(5, '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏')
        for i, (_, row) in enumerate(top_coefficient.iterrows(), 1):
            print(f"{i}. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {row['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏']:.2f}")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()
    
    if stat_tables.get('engagement', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –í–ò–†–ê–õ–¨–ù–û–°–¢–ò –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–ò:")
        print("-" * 40)
        top_engagement = df.nlargest(5, '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏')
        for i, (_, row) in enumerate(top_engagement.iterrows(), 1):
            print(f"{i}. –í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {row['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏']:.2f}%")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –û–±—â–µ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: {row['–†–µ–∞–∫—Ü–∏–∏'] + row['–ö–æ–º–º–µ–Ω—Ç—ã'] + row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()
    
    if stat_tables.get('forwards', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –ü–ï–†–ï–°–´–õ–ö–ê–ú:")
        print("-" * 40)
        top_forwards = df.nlargest(5, '–ü–µ—Ä–µ—Å—ã–ª–∫–∏')
        for i, (_, row) in enumerate(top_forwards.iterrows(), 1):
            print(f"{i}. –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()
    
    if stat_tables.get('reactions', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –†–ï–ê–ö–¶–ò–Ø–ú:")
        print("-" * 40)
        top_reactions = df.nlargest(5, '–†–µ–∞–∫—Ü–∏–∏')
        for i, (_, row) in enumerate(top_reactions.iterrows(), 1):
            print(f"{i}. –†–µ–∞–∫—Ü–∏–∏: {row['–†–µ–∞–∫—Ü–∏–∏']}")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()
    
    if stat_tables.get('views', False):
        print("\n–¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú:")
        print("-" * 40)
        top_views = df.nlargest(5, '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã')
        for i, (_, row) in enumerate(top_views.iterrows(), 1):
            print(f"{i}. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}")
            print(f"   –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}")
            print(f"   –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}")
            print(f"   –†–µ–∞–∫—Ü–∏–∏: {row['–†–µ–∞–∫—Ü–∏–∏']}")
            print(f"   –¢–∏–ø: {row['–¢–∏–ø']}")
            print()

def create_virality_summary_report(df, channel_username, start_date, end_date):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    """
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
    df = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç'])].copy()
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
    numeric_columns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–†–µ–∞–∫—Ü–∏–∏', '–í—Å–µ–≥–æ (+)', '–í—Å–µ–≥–æ (-)', '–í—Å–µ–≥–æ', '–ö–æ–º–º–µ–Ω—Ç—ã', '–ü–µ—Ä–µ—Å—ã–ª–∫–∏', 'ER%', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏', '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    report_data = []
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': len(df),
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω—è—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].mean():.2f}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].max():.2f}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].min():.2f}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏'
    })
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω–∏–π ER%',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['ER%'].mean():.2f}%",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–ö–æ–º–º–µ–Ω—Ç—ã'].mean():.1f}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–ö–æ–º–º–µ–Ω—Ç—ã'].sum():,}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–π (+/-)',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–í—Å–µ–≥–æ (+)'].mean() - df['–í—Å–µ–≥–æ (-)'].mean():.1f}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π'
    })
    
    report_data.append({
        '–ú–µ—Ç—Ä–∏–∫–∞': '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–π (+/-)',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{df['–í—Å–µ–≥–æ (+)'].sum() - df['–í—Å–µ–≥–æ (-)'].sum():,}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π'
    })
    
    # –¢–æ–ø –ø–æ—Å—Ç—ã
    top_viral = df.nlargest(3, '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å')
    for i, (_, row) in enumerate(top_viral.iterrows(), 1):
        report_data.append({
            '–ú–µ—Ç—Ä–∏–∫–∞': f"{i}. {row['–î–∞—Ç–∞']}",
            '–ó–Ω–∞—á–µ–Ω–∏–µ': f"–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {row['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å']:.2f}",
            '–û–ø–∏—Å–∞–Ω–∏–µ': f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {row['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:,}, –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {row['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {row['–ö–æ–º–º–µ–Ω—Ç—ã']}, ER%: {row['ER%']:.2f}%, –ë–∞–ª–∞–Ω—Å: {row['–í—Å–µ–≥–æ (+)'] - row['–í—Å–µ–≥–æ (-)']}, –¢–∏–ø: {row['–¢–∏–ø']}"
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_stats = df.groupby('–¢–∏–ø').agg({
        '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å': 'mean',
        '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': 'mean',
        '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': 'mean',
        '–†–µ–∞–∫—Ü–∏–∏': 'mean',
        '–ö–æ–º–º–µ–Ω—Ç—ã': 'mean'
    }).round(2)
    
    for content_type, stats in content_stats.iterrows():
        report_data.append({
            '–ú–µ—Ç—Ä–∏–∫–∞': f"–¢–∏–ø: {content_type}",
            '–ó–Ω–∞—á–µ–Ω–∏–µ': f"–°—Ä–µ–¥–Ω—è—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {stats['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å']:.2f}",
            '–û–ø–∏—Å–∞–Ω–∏–µ': f"–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']:.0f}, –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {stats['–ü–µ—Ä–µ—Å—ã–ª–∫–∏']:.1f}, –†–µ–∞–∫—Ü–∏–∏: {stats['–†–µ–∞–∫—Ü–∏–∏']:.1f}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {stats['–ö–æ–º–º–µ–Ω—Ç—ã']:.1f}"
        })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç—á–µ—Ç–∞
    report_df = pd.DataFrame(report_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    filename = 'virality_summary_report.xlsx'
    save_to_excel(report_df, filename, channel_username, start_date, end_date)
    print(f"–°–æ–∑–¥–∞–Ω —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {filename}")

def analyse(channel_url):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ Telegram
    
    Args:
        channel_url (str): URL –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "https://t.me/sellerx")
        
    Returns:
        str: –¢–µ–∫—Å—Ç –∏–∑ —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Ç–µ–∫—Å—Ç 1: —Ç–µ–∫—Å—Ç\n—Ç–µ–∫—Å—Ç 2: —Ç–µ–∫—Å—Ç\n..."
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ analyse
    from analyse import save_to_excel, create_multiple_sorted_files, print_virality_statistics, create_virality_summary_report
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
    match = re.search(r"(?:https?://)?t\.me/(.+?)(?:/|$)", channel_url)
    if not match:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
    channel_username = match.group(1).replace('@', '')
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ results/all_folders
    out_dir = Path('results', 'all_folders') / channel_username
    out_dir.mkdir(parents=True, exist_ok=True)
    
    with TelegramClient('session_name', api_id, api_hash) as client:
        messages = []
        albums = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = client.get_entity(channel_username)
            print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: {channel.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            for message in client.iter_messages(channel, offset_date=start_date, reverse=True):
                if message.date > end_date:
                    break
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.action:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_type = "–¢–µ–∫—Å—Ç"
                if message.photo:
                    content_type = "–§–æ—Ç–æ"
                elif message.video:
                    content_type = "–í–∏–¥–µ–æ"
                elif message.document:
                    content_type = "–î–æ–∫—É–º–µ–Ω—Ç"
                elif message.voice:
                    content_type = "–ì–æ–ª–æ—Å–æ–≤–æ–µ"
                elif message.video_note:
                    content_type = "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
                elif message.sticker:
                    content_type = "–°—Ç–∏–∫–µ—Ä"
                elif message.poll:
                    content_type = "–û–ø—Ä–æ—Å"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                reactions = message.reactions
                positive_reactions = 0
                negative_reactions = 0
                total_reactions = 0
                
                if reactions:
                    try:
                        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–∫—Ü–∏—è–º –≤ Telethon
                        for reaction in reactions.results:
                            emoji = reaction.reaction.emoji if hasattr(reaction.reaction, 'emoji') else 'üëç'
                            count = reaction.count
                            total_reactions += count
                            
                            if emoji in POSITIVE_EMOJIS:
                                positive_reactions += count
                            else:
                                negative_reactions += count
                    except AttributeError:
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Telethon
                        try:
                            for reaction in reactions.reactions:
                                emoji = reaction.emoji
                                count = reaction.count
                                total_reactions += count
                                
                                if emoji in POSITIVE_EMOJIS:
                                    positive_reactions += count
                                else:
                                    negative_reactions += count
                        except:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–ª–∏
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                comments_count = 0
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    if hasattr(message, 'replies') and message.replies:
                        comments_count = message.replies.replies
                except:
                    pass
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—ã–ª–æ–∫
                forwards_count = 0
                try:
                    if hasattr(message, 'forwards'):
                        forwards_count = message.forwards
                except:
                    pass
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                views_count = 0
                try:
                    if hasattr(message, 'views'):
                        views_count = message.views
                except:
                    pass
                
                message_data = {
                    '–î–∞—Ç–∞': message.date.strftime('%d.%m.%Y %H:%M'),
                    '–ü–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç': message.text if message.text else '',
                    '–¢–∏–ø': content_type,
                    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': views_count,
                    '–†–µ–∞–∫—Ü–∏–∏': total_reactions,
                    '–í—Å–µ–≥–æ (+)': positive_reactions,
                    '–í—Å–µ–≥–æ (-)': negative_reactions,
                    '–í—Å–µ–≥–æ': total_reactions,
                    '–ö–æ–º–º–µ–Ω—Ç—ã': comments_count,
                    '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': forwards_count
                }
                
                messages.append(message_data)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤
                if message.grouped_id:
                    if message.grouped_id not in albums:
                        albums[message.grouped_id] = []
                    albums[message.grouped_id].append(message_data)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return ""
        
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        if not messages:
            print("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return ""
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(messages)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ only_text
        if only_text:
            df = df[df['–¢–∏–ø'] == '–¢–µ–∫—Å—Ç'].reset_index(drop=True)
        
        df = df.sort_values(by='–î–∞—Ç–∞', ascending=False).reset_index(drop=True)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
        numeric_columns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–†–µ–∞–∫—Ü–∏–∏', '–í—Å–µ–≥–æ (+)', '–í—Å–µ–≥–æ (-)', '–í—Å–µ–≥–æ', '–ö–æ–º–º–µ–Ω—Ç—ã', '–ü–µ—Ä–µ—Å—ã–ª–∫–∏']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º ER%
        df['ER%'] = df.apply(calculate_er_percentage, axis=1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å
        df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'] = df.apply(calculate_virality, axis=1)
        df['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏'] = df.apply(calculate_viral_coefficient, axis=1)
        df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏'] = df.apply(calculate_engagement_virality, axis=1)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        df = sort_by_virality(df, SORT_BY_VIRALITY)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        total_row = {
            '–î–∞—Ç–∞': '–ò—Ç–æ–≥–æ',
            '–ü–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç': '',
            '–¢–∏–ø': '',
            '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].sum(),
            '–†–µ–∞–∫—Ü–∏–∏': df['–†–µ–∞–∫—Ü–∏–∏'].sum(),
            '–í—Å–µ–≥–æ (+)': df['–í—Å–µ–≥–æ (+)'].sum(),
            '–í—Å–µ–≥–æ (-)': df['–í—Å–µ–≥–æ (-)'].sum(),
            '–í—Å–µ–≥–æ': df['–í—Å–µ–≥–æ'].sum(),
            '–ö–æ–º–º–µ–Ω—Ç—ã': df['–ö–æ–º–º–µ–Ω—Ç—ã'].sum(),
            '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': df['–ü–µ—Ä–µ—Å—ã–ª–∫–∏'].sum(),
            'ER%': (df['–†–µ–∞–∫—Ü–∏–∏'].sum() + df['–ö–æ–º–º–µ–Ω—Ç—ã'].sum() + df['–ü–µ—Ä–µ—Å—ã–ª–∫–∏'].sum()) / df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].sum() * 100 if df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].sum() > 0 else 0,
            '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å': df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].sum(),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏': df['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏'].sum(),
            '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏': df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏'].sum()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        avg_row = {
            '–î–∞—Ç–∞': '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç',
            '–ü–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç': '',
            '–¢–∏–ø': '',
            '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'].mean(),
            '–†–µ–∞–∫—Ü–∏–∏': df['–†–µ–∞–∫—Ü–∏–∏'].mean(),
            '–í—Å–µ–≥–æ (+)': df['–í—Å–µ–≥–æ (+)'].mean(),
            '–í—Å–µ–≥–æ (-)': df['–í—Å–µ–≥–æ (-)'].mean(),
            '–í—Å–µ–≥–æ': df['–í—Å–µ–≥–æ'].mean(),
            '–ö–æ–º–º–µ–Ω—Ç—ã': df['–ö–æ–º–º–µ–Ω—Ç—ã'].mean(),
            '–ü–µ—Ä–µ—Å—ã–ª–∫–∏': df['–ü–µ—Ä–µ—Å—ã–ª–∫–∏'].mean(),
            'ER%': df['ER%'].mean(),
            '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å': df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å'].mean(),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏': df['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏'].mean(),
            '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏': df['–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏'].mean()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = pd.concat([df, pd.DataFrame([total_row, avg_row])], ignore_index=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        save_to_excel(df, 'posts.xlsx', channel_username, start_date, end_date)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if CREATE_MULTIPLE_SORTED_FILES:
            print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏...")
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save_to_excel –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ out_dir (temporary override)
            def save_to_excel_dir(df, filename, channel_username, start_date, end_date):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –∫–∞–Ω–∞–ª–∞ –≤ results/all_folders
                file_path = out_dir / filename
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É
                def save_to_excel_temp(df, filename, channel_username, start_date, end_date):
                    wb = Workbook()
                    ws = wb.active
                    ws.title = "Posts"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for r in dataframe_to_rows(df, index=False, header=True):
                        ws.append(r)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    header_font = Font(bold=True, color="FFFFFF")
                    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                    header_alignment = Alignment(horizontal="center", vertical="center")
                    
                    for cell in ws[1]:
                        cell.font = header_font
                        cell.fill = header_fill
                        cell.alignment = header_alignment
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                    for column in ws.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        ws.column_dimensions[column_letter].width = adjusted_width
                    
                    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    ws.freeze_panes = "A2"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –ø–µ—Ä–∏–æ–¥–µ
                    ws.insert_rows(1, 3)
                    ws['A1'] = f"–ö–∞–Ω–∞–ª: {channel_username}"
                    ws['A2'] = f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
                    ws['A3'] = f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(df)}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    wb.save(file_path)
                    print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                
                save_to_excel_temp(df, filename, channel_username, start_date, end_date)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë
            old_save_to_excel = save_to_excel
            save_to_excel = save_to_excel_dir
            create_multiple_sorted_files(df, channel_username, start_date, end_date)
            save_to_excel = old_save_to_excel  # Restore original save_to_excel
            print("–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        if SHOW_VIRALITY_STATISTICS:
            print_virality_statistics(df)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        if CREATE_VIRALITY_SUMMARY_REPORT:
            create_virality_summary_report(df, channel_username, start_date, end_date)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏–∑ —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤
        top_posts_text = ""
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-5
        df_for_top = df[~df['–î–∞—Ç–∞'].isin(['–ò—Ç–æ–≥–æ', '–í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ—Å—Ç'])].copy()
        
        if len(df_for_top) > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
            top_5_posts = df_for_top.nlargest(5, '–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å')
            
            for i, (_, row) in enumerate(top_5_posts.iterrows(), 1):
                post_text = row.get('–ü–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç', '')
                if post_text and post_text.strip():
                    top_posts_text += f"—Ç–µ–∫—Å—Ç {i}:\n{post_text.strip()}\n\n"
        
        return top_posts_text 